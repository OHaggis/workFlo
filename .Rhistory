tb_test <-
tb_sel %>%
mutate(log2FC = logFC.overall_4h.vs.ON * 1.2 + rnorm(dim(.)[2], 0.2, 1) * 0.2 * logFC.overall_4h.vs.ON,
p.value = P.Value.overall_4h.vs.ON + runif(dim(.)[2], min = 0.000001, max = 0.1) * P.Value.overall_4h.vs.ON * 2) %>%
filter(!is.na(p.value)) %>%
filter(!is.na(log2FC)) %>%
.[sample(seq(1, 1662, 1), 1000), ] %>%
mutate(FDR = p.adjust(p.value, "fdr"))
tb_test <-
tb_sel %>%
mutate(log2FC = logFC.overall_4h.vs.ON * 1.2 + rnorm(dim(.)[2], 0.2, 1) * 0.2 * logFC.overall_4h.vs.ON,
p.value = P.Value.overall_4h.vs.ON + runif(dim(.)[2], min = 0.000001, max = 0.1) * P.Value.overall_4h.vs.ON * 2) %>%
filter(!is.na(p.value)) %>%
filter(!is.na(log2FC)) %>%
.[sample(seq(1, 1662, 1), 1000), ] %>%
mutate(FDR = p.adjust(p.value, "fdr")) %>%
mutate(feature = str_c("Feat_", seq(1, 1000, 1)))
tb_save <- tb_test %>% select(feature, log2FC, p.value, FDR)
tb %>%
ggplot(aes(x = logFC.overall_4h.vs.ON,
y = -log10(adj.P.Val.overall_4h.vs.ON))) +
geom_point() +
geom_point(data = tb_test,
aes(x = log2FC,
y = -log10(FDR)),
col = "red")
tb_save <- tb_test %>% select(feature, log2FC, p.value, FDR)
save(tb_save, file="C:/Users/Florian Wiesenhofer/Documents/PandorasToolBox/data/volcano.RData")
volcano <- tb_save
volcano2 <- volcano %>%
mutate(FDR_cutoff = dyn_volcano_cut(log2FC),
above_cutoff = FDR > FDR_cutoff)
volcano2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
coord_cartesian(ylim = c(0, max(-log10(volcano2$FDR))))
?pch
volcano2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 2,
col = "red") +
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 2,
col = "red") +
coord_cartesian(ylim = c(0, max(-log10(volcano2$FDR))))
volcano2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
coord_cartesian(ylim = c(0, max(-log10(volcano2$FDR))))
volcano2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
coord_cartesian(ylim = c(0, max(-log10(volcano2$FDR)))) +
theme_classic()
volcano2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "orange") +
coord_cartesian(ylim = c(0, max(-log10(volcano2$FDR)))) +
theme_classic()
volcano2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
coord_cartesian(ylim = c(0, max(-log10(volcano2$FDR)))) +
theme_classic()
devtools::unload("PandorasToolBox")
remove.packages("PandorasToolBox")
devtools::install_github("OHaggis/PandorasToolBox")
require(tidyverse)
require(PandorasToolBox)
?dyn_volcano_cut
data("C:/Users/Florian Wiesenhofer/Documents/PandorasToolBox/data/volcano.RData")
data("volcano")
volcano
volcano
remove.packages("PandorasToolBox")
devtools::install_github("OHaggis/PandorasToolBox")
require(tidyverse)
require(PandorasToolBox)
dyn_volcano_cut()
?dyn_volcano_cut()
volcano
data(volcano)
volcano
devtools::install_github("OHaggis/PandorasToolBox")
require(PandorasToolBox)
require(tidyverse)
data("volcano_analysis")
data(volcano_analysis)
tb <- tibble(read.xlsx("//kikli-nephro8/fwi/Experiments/ZP102/TMT/R/investigative/190822_full-fact_paired_LIMMA.xlsx"))
tb_sel <-
tb %>%
select(ID, logFC.overall_4h.vs.ON, P.Value.overall_4h.vs.ON)
tb_test <-
tb_sel %>%
mutate(log2FC = logFC.overall_4h.vs.ON * 1.2 + rnorm(dim(.)[2], 0.2, 1) * 0.2 * logFC.overall_4h.vs.ON,
p.value = P.Value.overall_4h.vs.ON + runif(dim(.)[2], min = 0.000001, max = 0.1) * P.Value.overall_4h.vs.ON * 2) %>%
filter(!is.na(p.value)) %>%
filter(!is.na(log2FC)) %>%
.[sample(seq(1, 1662, 1), 1000), ] %>%
mutate(FDR = p.adjust(p.value, "fdr")) %>%
mutate(feature = str_c("Feat_", seq(1, 1000, 1)))
tb <- tibble(read.xlsx("//kikli-nephro8/fwi/Experiments/ZP102/TMT/R/investigative/190822_full-fact_paired_LIMMA.xlsx"))
library(openxlsx)
devtools::install_github("OHaggis/PandorasToolBox")
require(tidyverse)
require(PandorasToolBox)
volcano_analysis
?dyn_volcano_cut
# calculate the needed FDR cut-off for a given log2-FC
# test if testd FDR lies above cut-off
volcano2 <- volcano %>%
mutate(FDR_cutoff = dyn_volcano_cut(log2FC),
above_cutoff = FDR > FDR_cutoff)
require(tidyverse)
# calculate the needed FDR cut-off for a given log2-FC
# test if testd FDR lies above cut-off
volcano2 <- volcano %>%
mutate(FDR_cutoff = dyn_volcano_cut(log2FC),
above_cutoff = FDR > FDR_cutoff)
devtools::install_github("OHaggis/PandorasToolBox")
require(tidyverse)
require(PandorasToolBox)
devtools::install_github("OHaggis/PandorasToolBox")
require(tidyverse)
require(PandorasToolBox)
?dyn_volcano_cut
# calculate the needed FDR cut-off for a given log2-FC
# test if testd FDR lies above cut-off
volcano_analysis2 <- volcano_analysis %>%
mutate(FDR_cutoff = dyn_volcano_cut(log2FC),
above_cutoff = FDR > FDR_cutoff)
volcano_analysis2
volcano_analysis %>%
mutate(fdr = p.adjust(p.value, "fdr"))
volcano_analysis2
# plot an explanation
volcano_analysis2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
# first "forced" point of hyperbole, parametrised
# standard parameter
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(1.5) + 0.25,
y = -log10(0.001),
col = "red",
label = "point 1") +
# second "forced" point of hyperbole, parametrised
# standard parameters
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(4),
y = -log10(0.05),
col = "red",
label = "point 2") +
coord_cartesian(ylim = c(0, max(-log10(volcano_analysis2$FDR)))) +
theme_classic()
devtools::install_github("OHaggis/PandorasToolBox")
require(tidyverse)
require(PandorasToolBox)
?dyn_volcano_cut
# calculate the needed FDR cut-off for a given log2-FC
# test if testd FDR lies above cut-off
volcano_analysis2 <- volcano_analysis %>%
mutate(FDR_cutoff = dyn_volcano_cut(log2FC),
above_cutoff = FDR < FDR_cutoff)
# plot an explanation
volcano_analysis2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
# first "forced" point of hyperbole, parametrised
# standard parameter
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(1.5) + 0.25,
y = -log10(0.001),
col = "red",
label = "point 1") +
# second "forced" point of hyperbole, parametrised
# standard parameters
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(4),
y = -log10(0.05),
col = "red",
label = "point 2") +
coord_cartesian(ylim = c(0, max(-log10(volcano_analysis2$FDR)))) +
theme_classic()
devtools::install_github("OHaggis/PandorasToolBox")
devtools::install_github("OHaggis/PandorasToolBox")
require(tidyverse)
require(PandorasToolBox)
require(tidyverse)
require(PandorasToolBox)
?dyn_volcano_cut
# calculate the needed FDR cut-off for a given log2-FC
# test if testd FDR lies above cut-off
volcano_analysis2 <- volcano_analysis %>%
mutate(FDR_cutoff = dyn_volcano_cut(log2FC),
above_cutoff = FDR < FDR_cutoff)
# plot an explanation
volcano_analysis2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
# first "forced" point of hyperbole, parametrised
# standard parameter
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(1.5) + 0.25,
y = -log10(0.001),
col = "red",
label = "point 1") +
# second "forced" point of hyperbole, parametrised
# standard parameters
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(4),
y = -log10(0.1),
col = "red",
label = "point 2") +
coord_cartesian(ylim = c(0, max(-log10(volcano_analysis2$FDR)))) +
theme_classic()
-log10(0.1)
volcano_analysis2
# plot an explanation
volcano_analysis2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
# first "forced" point of hyperbole, parametrised
# standard parameter
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(1.5) + 0.25,
y = -log10(0.001),
col = "red",
label = "point 1") +
# second "forced" point of hyperbole, parametrised
# standard parameters
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(4),
y = -log10(0.1),
col = "red",
label = "point 2") +
coord_cartesian(ylim = c(0, max(-log10(volcano_analysis2$FDR)))) +
theme_classic()
volcano_analysis2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
# first "forced" point of hyperbole, parametrised
# standard parameter
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(1.5) + 0.25,
y = -log10(0.001),
col = "red",
label = "point 1")
volcano_analysis2
volcano_analysis2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green")
require(tidyverse)
# plot an explanation
volcano_analysis2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
# first "forced" point of hyperbole, parametrised
# standard parameter
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(1.5) + 0.25,
y = -log10(0.001),
col = "red",
label = "point 1") +
# second "forced" point of hyperbole, parametrised
# standard parameters
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(4),
y = -log10(0.1),
col = "red",
label = "point 2") +
coord_cartesian(ylim = c(0, max(-log10(volcano_analysis2$FDR)))) +
theme_classic()
remove.packages("PandorasToolBox")
devtools::install_github("OHaggis/PandorasToolBox")
require(tidyverse)
require(PandorasToolBox)
?dyn_volcano_cut
data("volcano_analysis")
volcano_analysis
# calculate the needed FDR cut-off for a given log2-FC
# test if testd FDR lies above cut-off
volcano_analysis2 <- volcano_analysis %>%
mutate(FDR_cutoff = dyn_volcano_cut(log2FC),
above_cutoff = FDR < FDR_cutoff)
# plot an explanation
volcano_analysis2 %>%
ggplot(aes(x = log2FC,
y = -log10(FDR))) +
geom_point(aes(col = above_cutoff)) +
stat_function(fun = function(x) -log10(dyn_volcano_cut(FC = x)),
n = 1001,
colour = "green") +
# first "forced" point of hyperbole, parametrised
# standard parameter
annotate(geom = "point",
x = log2(1.5),
y = -log10(0.001),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(1.5) - 0.25,
y = -log10(0.0008),
col = "red",
label = "point 1") +
# second "forced" point of hyperbole, parametrised
# standard parameters
annotate(geom = "point",
x = log2(4),
y = -log10(0.05),
pch = 4,
size = 5,
col = "red") +
annotate(geom = "text",
x = log2(4),
y = -log10(0.1),
col = "red",
label = "point 2") +
coord_cartesian(ylim = c(0, max(-log10(volcano_analysis2$FDR)))) +
theme_classic()
remove.packages("PandorasToolBox")
devtools::install_github("OHaggis/PandorasToolBox")
### Setup envir
# This is a package I wrote deploying some functions I use in my workflows
devtools::install_github('OHaggis/PandorasToolBox')
### Setup envir
# This is a package I wrote deploying some functions I use in my workflows
# devtools::install_github('OHaggis/PandorasToolBox')
require(PandorasToolBox)
# Make a package for collaborators to download from github
require(devtools)
require(roxygen2)
require(openxlsx)
require(stringr)
devtools::create("workFlo")
setwd("C:/Users/Florian Wiesenhofer/Documents/workFlo")
devtools::document()
